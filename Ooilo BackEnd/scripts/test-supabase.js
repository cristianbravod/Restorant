// scripts/test-supabase.js - Script para probar la conexi√≥n a Supabase
const { Pool } = require('pg');
require('dotenv').config();

console.log('üß™ Probando conexi√≥n a Supabase PostgreSQL...\n');

// Configuraci√≥n de Supabase (CORREGIDA)
const pool = new Pool({
  user: process.env.DB_USER || 'postgres.ugcrigkvfejqlsoqnxxh',
  host: process.env.DB_HOST || 'aws-0-us-east-2.pooler.supabase.com',
  database: process.env.DB_NAME || 'postgres',
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT || 6543, // Puerto correcto del pooler
  ssl: {
    rejectUnauthorized: false
  },
  max: 2, // Solo para testing
  connectionTimeoutMillis: 10000
});

async function testBasicConnection() {
  console.log('üîå Test 1: Conexi√≥n b√°sica');
  let client;
  try {
    client = await pool.connect();
    const result = await client.query('SELECT NOW() as timestamp, version() as version');
    
    console.log('‚úÖ Conexi√≥n exitosa');
    console.log(`   Timestamp: ${result.rows[0].timestamp}`);
    console.log(`   PostgreSQL: ${result.rows[0].version.split(' ')[1]}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n:', error.message);
    return false;
  } finally {
    if (client) client.release();
  }
}

async function testDatabaseOperations() {
  console.log('\nüìã Test 2: Operaciones de base de datos');
  let client;
  try {
    client = await pool.connect();
    
    // Crear tabla temporal
    await client.query(`
      CREATE TEMP TABLE test_table (
        id SERIAL PRIMARY KEY,
        name VARCHAR(50),
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);
    console.log('‚úÖ Tabla temporal creada');
    
    // Insertar datos
    const insertResult = await client.query(
      'INSERT INTO test_table (name) VALUES ($1) RETURNING *',
      ['Test Record']
    );
    console.log('‚úÖ Inserci√≥n exitosa');
    
    // Consultar datos
    const selectResult = await client.query('SELECT * FROM test_table');
    console.log(`‚úÖ Consulta exitosa - ${selectResult.rows.length} registros`);
    
    // Actualizar datos
    await client.query(
      'UPDATE test_table SET name = $1 WHERE id = $2',
      ['Updated Record', insertResult.rows[0].id]
    );
    console.log('‚úÖ Actualizaci√≥n exitosa');
    
    // Eliminar datos
    await client.query('DELETE FROM test_table WHERE id = $1', [insertResult.rows[0].id]);
    console.log('‚úÖ Eliminaci√≥n exitosa');
    
    return true;
  } catch (error) {
    console.error('‚ùå Error en operaciones:', error.message);
    return false;
  } finally {
    if (client) client.release();
  }
}

async function testTables() {
  console.log('\nüóÇÔ∏è Test 3: Verificar tablas del sistema');
  let client;
  try {
    client = await pool.connect();
    
    const expectedTables = [
      'usuarios', 'categorias', 'menu_items', 'mesas', 
      'ordenes', 'orden_items', 'platos_especiales', 'reservaciones'
    ];
    
    const result = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = ANY($1)
      ORDER BY table_name
    `, [expectedTables]);
    
    const foundTables = result.rows.map(row => row.table_name);
    const missingTables = expectedTables.filter(table => !foundTables.includes(table));
    
    console.log(`‚úÖ Tablas encontradas (${foundTables.length}/${expectedTables.length}):`);
    foundTables.forEach(table => console.log(`   ‚Ä¢ ${table}`));
    
    if (missingTables.length > 0) {
      console.log('\n‚ö†Ô∏è Tablas faltantes:');
      missingTables.forEach(table => console.log(`   ‚Ä¢ ${table}`));
      console.log('\nüí° Ejecuta: npm run setup-supabase');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error verificando tablas:', error.message);
    return false;
  } finally {
    if (client) client.release();
  }
}

async function testDataIntegrity() {
  console.log('\nüìä Test 4: Integridad de datos');
  let client;
  try {
    client = await pool.connect();
    
    // Verificar datos b√°sicos
    const counts = await client.query(`
      SELECT 
        (SELECT COUNT(*) FROM usuarios) as usuarios,
        (SELECT COUNT(*) FROM categorias) as categorias,
        (SELECT COUNT(*) FROM menu_items) as menu_items,
        (SELECT COUNT(*) FROM mesas) as mesas
    `);
    
    const data = counts.rows[0];
    console.log('üìà Conteos de datos:');
    console.log(`   ‚Ä¢ Usuarios: ${data.usuarios}`);
    console.log(`   ‚Ä¢ Categor√≠as: ${data.categorias}`);
    console.log(`   ‚Ä¢ Items del men√∫: ${data.menu_items}`);
    console.log(`   ‚Ä¢ Mesas: ${data.mesas}`);
    
    // Verificar usuario admin
    const adminCheck = await client.query(
      "SELECT email FROM usuarios WHERE rol = 'admin' LIMIT 1"
    );
    
    if (adminCheck.rows.length > 0) {
      console.log(`‚úÖ Usuario admin encontrado: ${adminCheck.rows[0].email}`);
    } else {
      console.log('‚ö†Ô∏è No se encontr√≥ usuario admin');
    }
    
    // Verificar relaciones de clave for√°nea
    const relationCheck = await client.query(`
      SELECT 
        mi.nombre as menu_item,
        c.nombre as categoria
      FROM menu_items mi
      JOIN categorias c ON mi.categoria_id = c.id
      LIMIT 3
    `);
    
    if (relationCheck.rows.length > 0) {
      console.log('‚úÖ Relaciones de claves for√°neas funcionando');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error verificando integridad:', error.message);
    return false;
  } finally {
    if (client) client.release();
  }
}

async function testPerformance() {
  console.log('\n‚ö° Test 5: Performance b√°sico');
  let client;
  try {
    client = await pool.connect();
    
    const startTime = Date.now();
    
    // Query de ejemplo que simula uso real
    await client.query(`
      SELECT 
        mi.nombre,
        mi.precio,
        c.nombre as categoria
      FROM menu_items mi
      JOIN categorias c ON mi.categoria_id = c.id
      WHERE mi.disponible = true
      ORDER BY c.nombre, mi.nombre
    `);
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚úÖ Query ejecutado en ${duration}ms`);
    
    if (duration < 1000) {
      console.log('‚úÖ Performance: Excelente');
    } else if (duration < 3000) {
      console.log('‚ö†Ô∏è Performance: Aceptable');
    } else {
      console.log('‚ùå Performance: Lento - revisa conexi√≥n');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error en test de performance:', error.message);
    return false;
  } finally {
    if (client) client.release();
  }
}

async function showConnectionInfo() {
  console.log('\nüìã Informaci√≥n de conexi√≥n:');
  console.log(`   Host: ${process.env.DB_HOST || 'db.ugcrigkvfejqlsoqnxxh.supabase.co'}`);
  console.log(`   Port: ${process.env.DB_PORT || '5432'}`);
  console.log(`   Database: ${process.env.DB_NAME || 'postgres'}`);
  console.log(`   User: ${process.env.DB_USER || 'postgres'}`);
  console.log(`   SSL: habilitado`);
  console.log(`   Password: ${process.env.DB_PASSWORD ? '[configurado]' : '[‚ùå NO CONFIGURADO]'}`);
}

async function main() {
  console.log('üß™ SUITE DE PRUEBAS PARA SUPABASE POSTGRESQL');
  console.log('='.repeat(50));
  
  // Mostrar informaci√≥n de conexi√≥n
  showConnectionInfo();
  
  // Verificar variables de entorno
  if (!process.env.DB_PASSWORD) {
    console.error('\n‚ùå ERROR: DB_PASSWORD no est√° configurado');
    console.error('üí° Configura tu contrase√±a de Supabase en .env:');
    console.error('   DB_PASSWORD=tu_password_real');
    process.exit(1);
  }
  
  let allTestsPassed = true;
  
  try {
    // Test 1: Conexi√≥n b√°sica
    const connectionTest = await testBasicConnection();
    if (!connectionTest) {
      allTestsPassed = false;
      console.log('\n‚ùå Test de conexi√≥n fall√≥. Verifica tu configuraci√≥n.');
      process.exit(1);
    }
    
    // Test 2: Operaciones de BD
    const operationsTest = await testDatabaseOperations();
    if (!operationsTest) {
      allTestsPassed = false;
    }
    
    // Test 3: Verificar tablas
    const tablesTest = await testTables();
    if (!tablesTest) {
      allTestsPassed = false;
    }
    
    // Test 4: Integridad de datos
    const integrityTest = await testDataIntegrity();
    if (!integrityTest) {
      allTestsPassed = false;
    }
    
    // Test 5: Performance
    const performanceTest = await testPerformance();
    if (!performanceTest) {
      allTestsPassed = false;
    }
    
    // Resumen final
    console.log('\n' + '='.repeat(50));
    if (allTestsPassed) {
      console.log('üéâ TODOS LOS TESTS PASARON');
      console.log('‚úÖ Tu conexi√≥n a Supabase est√° funcionando perfectamente');
      console.log('\nüöÄ Pr√≥ximos pasos:');
      console.log('   1. Ejecuta: npm start');
      console.log('   2. Prueba la API: http://localhost:3000/api/health');
      console.log('   3. Conecta tu aplicaci√≥n m√≥vil');
    } else {
      console.log('‚ö†Ô∏è ALGUNOS TESTS FALLARON');
      console.log('üí° Revisa los errores anteriores y ejecuta:');
      console.log('   npm run setup-supabase');
    }
    
  } catch (error) {
    console.error('\n‚ùå Error ejecutando tests:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
    console.log('\nüîå Conexiones cerradas');
  }
}

if (require.main === module) {
  main();
}

module.exports = { 
  testBasicConnection, 
  testDatabaseOperations, 
  testTables, 
  testDataIntegrity, 
  testPerformance 
};